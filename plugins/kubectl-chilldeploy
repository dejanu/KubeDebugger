#!/usr/bin/env bash

## plugin purpose: inspect a deployment and offer the option to do a rolling update

# read namespaces
printf "\n Available namespaces are:\n $(kubectl get ns -o=custom-columns=NAMESPACES:.metadata.name) \n\t"
printf "\n \e[0;32m Please write the name of the namespace for which you want to know the list pod objects: \e[0m \n"
read -r ns


# one more chance to get the namespace right :)
if kubectl get ns | grep -q $ns; then
    # list all deploy from the selected namespace
    kubectl -n "${nspace}" get deploy -o=custom-columns=DEPLOYMENTs:.metadata.name
    printf "\n \e[0;32m Please select a deployment from ${ns} namespace: \e[0m \n"
    read deploy_name
else
    # list the namespaces again and aks the user to select a namespace
    printf "\n \e[0;32m The namespace ${ns} does not exist. Please select a namespace from the list below: \e[0m \n"
    printf "\n Available namespaces are:\n $(kubectl get ns -o=custom-columns=NAMESPACES:.metadata.name) \n\t"
    read -r ns
fi

while true; do

    # ask user what he would like to do: containers,images,logs,resource usage
    printf "\n  \e[0;32m What would you like to do? \e[0m \n"
    printf "\n  1. Deployment Status \n"
    printf "\n  2. Deployment Info \n"
    printf "\n  3. Deployment Images \n"
    printf "\n  4. Deployment Rollout \n"
    printf "\n  5. Deployment Rollback \n"
    printf "\n  6. Exit \n"
    read -r choice

    case $choice in
    1)
        # Get deployment status and history
        deploy_status=$(kubectl rollout status deploy $deploy_name -n $ns)
        deploy_history=$(kubectl rollout history deploy $deploy_name -n $ns)
        echo -e "\n\n  ðŸ”Ž Deployment status and history:\n ${deploy_status} and ${deploy_history} \n"
        ;;
    2)
        # Get deploy info
        deploy_events=$(kubectl -n $ns describe deploy $deploy_name)
        deploy_logs=$(kubectl -n $ns logs deploy $deploy_name)
        echo -e "\n\n  ðŸ”Ž Events for deployment: ${deploy_events} ${deploy_logs} \n"
        ;;
    3)
        # Get images used by the deployment
        images=$(kubectl -n $ns get deploy $deploy_name -o=jsonpath="{$.spec.template.spec.containers[:1].image}")
        echo -e "\n\n  ðŸ”Ž Images used in the deployment: ${images} \n"
        ;;
    4)
        # Deploy rollout based on the image from stdin
        printf "\n \e[0;32m Please write the new image: \e[0m \n"
        read -r new_image
        # Update image based on the hello_deploy.yaml file
        kubectl set image deployment ${deploy_name} goapp=${new_image} -n ${ns}
        ;;
    5)
        # Deploy rollback to first revision
        kubectl rollout undo deployment webapp --to-revision=1 -n ${ns}
        ;;
    6)
    # [Nn][Oo])
        echo -e "\n Exiting... \n"
        break
        ;;
    *)
        echo -e "\n Invalid choice. Please chose \n"
        ;;
    esac
done